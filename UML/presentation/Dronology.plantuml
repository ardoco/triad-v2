@startuml
' Direction hint for a more vertical layout
top to bottom direction

title Originales TRIAD: Dronology Implementierung 

package experiment {

  package enums {
    enum ProjectEnum {
      EBT
      <b>DRONOLOGY</b>
      WARC
      EASYCLINIC
      LIBEST
    }
  }

  package project {
    interface Project
    class Dronology implements Project {
      - {static} projectName = "dronology"
      - {static} level1ToLevel2MatricPath = "..."
      - {static} processedLevel1Path = "..."
      ' ... and other hardcoded paths
    }
  }

  ProjectEnum ..> Dronology : determines which Project class to instantiate

  package preprocess {
    package dronology {
      
      package entity {
        class DroneArtifact
        class Code
        class Attribute
      }

      class ReadJsonData {
        + {static} readDroneArtifactFromJSON(jsonFilePath): List<DroneArtifact>
      }

      class ExtractIssue {
        - {static} reqMap: Map<String, String>
        - {static} ddMap: Map<String, String>
        + {static} extractInitData()
        + {static} filterData()
        + {static} outputData()
      }

      class ProcessDronology {
        + {static} main()
        - {static} splitProcessIssueText(...)
        - {static} getLineOfIssue(...): Map<String, Integer>
      }

      class ExtractDronoBiterm {
        - {static} level1BitermsMap
        - {static} level2BitermsMap
        - {static} level3BitermsMap
        + {static} extractBiterms()
      }

      ' Vertical Data Flow & Relationships
      DroneArtifact "1" *-- "*" Code
      DroneArtifact "1" *-- "1" Attribute
      ReadJsonData ..> DroneArtifact : creates
      ReadJsonData --> ExtractIssue : provides List<DroneArtifact>
      ExtractIssue --> ProcessDronology : creates raw .txt files
      ProcessDronology --> ExtractDronoBiterm : creates processed .txt files
    }
  }
}

@enduml